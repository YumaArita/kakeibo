name: Build and Deploy React Native App

on:
  push:
    branches:
      - main

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        run: |
          cd ExpenseTracker
          npm install --legacy-peer-deps

      - name: Install Expo modules
        run: |
          cd ExpenseTracker
          npx expo install expo-modules-core expo-dev-client

      - name: Build Android
        run: |
          cd ExpenseTracker/android
          ./gradlew assembleRelease

  build-ios:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"

      - name: Check directory structure
        run: |
          pwd
          ls -R ExpenseTracker

      - name: Set up environment variables
        run: |
          echo "SANITY_PROJECT_ID=${{ secrets.SANITY_PROJECT_ID }}" >> $GITHUB_ENV
          echo "SANITY_DATASET=${{ secrets.SANITY_DATASET }}" >> $GITHUB_ENV
          echo "SANITY_TOKEN=${{ secrets.SANITY_TOKEN }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          cd ExpenseTracker
          npm install --legacy-peer-deps

      - name: Install Expo modules
        run: |
          cd ExpenseTracker
          npx expo install expo-modules-core expo-dev-client -- --legacy-peer-deps

      - name: Check exportOptions.plist content and permissions
        run: |
          ls -la $GITHUB_WORKSPACE/ExpenseTracker/ios/
          cat $GITHUB_WORKSPACE/ExpenseTracker/ios/exportOptions.plist
          chmod 644 $GITHUB_WORKSPACE/ExpenseTracker/ios/exportOptions.plist

      - name: Copy exportOptions.plist
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cp $GITHUB_WORKSPACE/ExpenseTracker/ios/exportOptions.plist $GITHUB_WORKSPACE/build/exportOptions.plist

      - name: Prebuild Expo project
        run: |
          cd ExpenseTracker
          npx expo prebuild

      - name: Increment build number
        run: |
          cd ExpenseTracker/ios
          currentVersion=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" Info.plist)
          newVersion=$((currentVersion + 1))
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $newVersion" Info.plist
          echo "Updated build number to $newVersion"

      - name: Check Info.plist before build
        run: |
          echo "Info.plist content before build:"
          cat ExpenseTracker/ios/Info.plist

      - name: Install CocoaPods dependencies
        run: |
          cd ExpenseTracker/ios
          pod install

      - name: Decode and Install Certificates and Provisioning Profiles
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > Certificate.p12
          if security list-keychains | grep -q "build.keychain"; then security delete-keychain build.keychain; fi
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import Certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-keychain-settings -lut 21600 build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          echo "$PROVISIONING_PROFILE_BASE64" | base64 --decode > Profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp Profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Configure Apple ID
        run: |
          xcrun altool --store-password-in-keychain-item "AC_PASSWORD" -u ${{ secrets.APPLE_ID }} -p ${{ secrets.APPLE_PASSWORD }}
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}

      - name: Build iOS
        run: |
          cd ExpenseTracker
          xcodebuild -workspace ios/ExpenseTracker.xcworkspace -scheme ExpenseTracker -sdk iphoneos -configuration Release archive -archivePath $GITHUB_WORKSPACE/build/ExpenseTracker.xcarchive CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY="iPhone Distribution" PROVISIONING_PROFILE_SPECIFIER="ExpenseTracker Distribution" DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }} -allowProvisioningUpdates
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Export IPA
        run: |
          cd ExpenseTracker
          xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/ExpenseTracker.xcarchive -exportOptionsPlist $GITHUB_WORKSPACE/build/exportOptions.plist -exportPath $GITHUB_WORKSPACE/build
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Check provisioning profile
        run: |
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "Content of Profile.mobileprovision:"
          cat ~/Library/MobileDevice/Provisioning\ Profiles/Profile.mobileprovision

      - name: Unzip and embed provisioning profile
        run: |
          cd $GITHUB_WORKSPACE/build
          unzip ExpenseTracker.ipa -d Payload
          cp ~/Library/MobileDevice/Provisioning\ Profiles/Profile.mobileprovision Payload/Payload/ExpenseTracker.app/embedded.mobileprovision
          zip -r ExpenseTracker_repackaged.ipa Payload

      - name: Update Info.plist in IPA
        run: |
          cd $GITHUB_WORKSPACE/build/Payload/Payload/ExpenseTracker.app
          currentVersion=$(/usr/libexec/PlistBuddy -c "Print :CFBundleVersion" Info.plist)
          newVersion=$((currentVersion + 1))
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $newVersion" Info.plist
          echo "Updated build number in IPA to $newVersion"

      - name: Verify repackaged IPA
        run: |
          unzip -l $GITHUB_WORKSPACE/build/ExpenseTracker_repackaged.ipa | grep embedded.mobileprovision

      - name: Increment version string
        run: |
          cd ExpenseTracker/ios
          currentVersion=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" Info.plist)
          IFS='.' read -ra VERSION_PARTS <<< "$currentVersion"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=$((VERSION_PARTS[2] + 1))
          newVersion="$MAJOR.$MINOR.$PATCH"
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $newVersion" Info.plist
          echo "Updated version string to $newVersion"

      - name: Verify Info.plist content
        run: |
          echo "ios/Info.plist:"
          /usr/libexec/PlistBuddy -c "Print CFBundleVersion" ExpenseTracker/ios/Info.plist
          /usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" ExpenseTracker/ios/Info.plist
          
      - name: Create and embed dummy provisioning profile if needed
        if: failure()
        run: |
          echo "This is a dummy provisioning profile" > dummy.mobileprovision
          cp dummy.mobileprovision $GITHUB_WORKSPACE/build/Payload/Payload/ExpenseTracker.app/embedded.mobileprovision
          cd $GITHUB_WORKSPACE/build
          zip -r ExpenseTracker_repackaged.ipa Payload

      - name: Repackage IPA after updating Info.plist
        run: |
          cd $GITHUB_WORKSPACE/build
          zip -r ExpenseTracker_final.ipa Payload

      - name: Upload IPA to App Store Connect
        run: |
          xcrun altool --upload-app -f $GITHUB_WORKSPACE/build/ExpenseTracker_repackaged.ipa -t ios -u ${{ secrets.APPLE_ID }} -p ${{ secrets.APPLE_PASSWORD }} --verbose
